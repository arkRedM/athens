{"version":3,"sources":["athens/db.cljs"],"mappings":"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","names":["athens.db/athens-url","athens.db/help-url","athens.db/ego-url","js/athens","js/athens.db","js/athens.db.rfdb","athens.db/rfdb","athens.db/str-kw-mappings","athens.db/convert-key","k","cljs.core.get","athens.db/parse-hms","hms","cljs.core/coll?","p1__50889#","cljs.core.map","cljs.core.reduce","p__50890","vec__50891","cljs.core.nth","acc","v","cljs.core.assoc","athens.db/parse-tuples","tuples","cljs.core.partition","cljs.core/rest","p1__50894#","clojure.edn/read-string","p1__50895#","cljs.core/cons","athens.db/json-str-to-edn","json-str","js/JSON.parse","cljs.core.js__GT_clj","athens.db/str-to-db-tx","edn-data","cljs.core/first","athens.db/schema","js/athens.db.dsdb","athens.db/dsdb","datascript.core.create_conn","posh.reagent/posh!","athens.db/e-by-av","a","cljs.core/deref","datascript.core.datoms","athens.db/v-by-ea","e","athens.db/rules","athens.db/inc-after","eid","order","G__50896","G__50897","G__50898","G__50899","G__50900","datascript.core/q","athens.db/dec-after","G__50901","G__50902","G__50903","G__50904","G__50905","athens.db/plus-after","x","G__50906","G__50907","G__50908","G__50909","G__50910","G__50911","athens.db/minus-after","G__50912","G__50913","G__50914","G__50915","G__50916","G__50917","athens.db/not-contains?","coll","cljs.core/contains?","athens.db/last-child?","uid","G__50919","G__50920","G__50921","G__50922","cljs.core.sort_by","cljs.core/second","cljs.core/last","cljs.core._EQ_","athens.db/uid-and-embed-id","or__4126__auto__","G__50926","cljs.core/re-find","cljs.core/vec","athens.db/sort-block-children","block","temp__5733__auto__","children","cljs.core/seq","athens.db/block-document-pull-vector","athens.db/node-document-pull-vector","cljs.core.conj","athens.db/get-block-document","id","posh.reagent/pull","athens.db/get-node-document","athens.db/get-athens-datoms","p1__50927#","cljs.core.filter","athens.db/shape-parent-query","pull-results","b","res","cljs.core.dissoc","cljs.core/reverse","athens.db/get-parents-recursively","athens.db/get-block","athens.db/get-parent","G__50928","G__50929","datascript.core/entity","athens.db/get-older-sib","sib-uid","G__50930","G__50931","G__50932","G__50933","older-sib","athens.db/same-parent?","uids","parents","cljs.core.mapv","cljs.core.comp","G__50934","G__50935","G__50936","cljs.core/count","athens.db/deepest-child-block","document","G__50937","G__50938","G__50939","datascript.core/pull","map__50942","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","n","athens.db/get-children-recursively","temp__5735__auto__","G__50944","G__50945","G__50946","cljs.core/tree-seq","athens.db/retract-page-recursively","title","cljs.core/next","athens.db/retract-uid-recursively","athens.db/re-case-insensitive","query","cljs.core/re-pattern","athens.util/escape-str","athens.db/search-exact-node-title","G__50949","G__50950","G__50951","var_args","G__50953","athens.db/search-in-node-title","js/Error","athens.db.search_in_node_title","ignore-dup","clojure.string/blank?","results","G__50954","G__50955","G__50956","G__50957","cljs.core.take","athens.db/get-root-parent-node","G__50960","athens.db/search-in-block-content","athens.db.search_in_block_content","G__50961","G__50962","G__50963","cljs.core.remove","cljs.core/nil?","p1__50958#","athens.db/nth-sibling","map__50964","find-order","G__50967","G__50968","G__50969","G__50970","G__50971","athens.db/prev-block-uid","vec__50972","map__50975","embed-id","parent","prev-sibling","open","prev-block","G__50977","athens.db/next-sibling-recursively","map__50978","sib","node","G__50981","athens.db/next-block-uid","vec__50982","map__50985","next-block-recursive","next-block","and__4115__auto__","G__50987","js/document.querySelector","selection?","vec__50988","o-uid","G__50991","athens.db.next_block_uid","js/athens.db.history","athens.db/history","cljs.core.atom","athens.db/history-limit","athens.db/drop-tail","xs","pred","athens.db/trim-head","cljs.core.drop","athens.db/find-prev","p1__50993#","cljs.core.take_while","cljs.core/not","athens.db/find-next","cljs.core/fnext","p1__50994#","cljs.core.drop_while","datascript.core.listen_BANG_","tx-report","map__50996","db-before","db-after","cljs.core.swap_BANG_","h","p1__50995#","athens.db/get-ref-ids","pattern","posh.reagent/q","athens.db/merge-parents-and-block","ref-ids","cljs.core/reduce-kv","m","_","blocks","cljs.core.merge","athens.db/group-by-parent","cljs.core/group-by","athens.db/get-data","athens.db/get-linked-references","athens.db/get-linked-block-references","athens.db/get-unlinked-references","athens.patterns/unlinked","athens.db/linked-refs-count","G__51000","G__51001","G__51002","athens.db/replace-linked-refs","athens.patterns/linked","G__51003","G__51004","G__51005","datascript.core/pull-many","new-str","clojure.string/replace","athens.db/pull-nil","db","selector","e51012","_e","athens.db/transact-state-for-uid","state","map__51015","local","previous","cljs.core.not_EQ_","cljs.core/assoc","new-block-string","tx-data","re-frame.core/dispatch","cljs.core/PersistentVector"],"sourcesContent":["(ns athens.db\n  (:require\n    [athens.patterns :as patterns]\n    [athens.util :refer [escape-str]]\n    [clojure.edn :as edn]\n    [clojure.string :as string]\n    [datascript.core :as d]\n    [posh.reagent :refer [posh! pull q]]\n    [re-frame.core :refer [dispatch]]))\n\n\n;; -- Example Roam DBs ---------------------------------------------------\n\n(def athens-url \"https://raw.githubusercontent.com/athensresearch/athens/master/data/athens.datoms\")\n(def help-url   \"https://raw.githubusercontent.com/athensresearch/athens/master/data/help.datoms\")\n(def ego-url    \"https://raw.githubusercontent.com/athensresearch/athens/master/data/ego.datoms\")\n\n\n;; -- re-frame -----------------------------------------------------------\n\n(defonce rfdb {:user                \"Socrates\"\n               :db/filepath         nil\n               :db/synced           true\n               :db/mtime            nil\n               :current-route       nil\n               :loading?            true\n               :modal               false\n               :alert               nil\n               :athena/open         false\n               :athena/recent-items '()\n               :devtool/open        false\n               :left-sidebar/open   false\n               :right-sidebar/open  false\n               :right-sidebar/items {}\n               :right-sidebar/width 32\n               :mouse-down          false\n               :daily-notes/items   []\n               :selected/items      []\n               :theme/dark          false})\n\n\n;; -- JSON Parsing ----------------------------------------------------\n\n(def str-kw-mappings\n  \"Maps attributes from \\\"Export All as JSON\\\" to original datascript attributes.\"\n  {\"children\" :block/children\n   \"create-email\" :create/email\n   \"create-time\" :create/time\n   \"edit-email\" :edit/email\n   \"edit-time\" :edit/time\n   \"email\" :user/email\n   \"emoji\" :ent/emoji\n   \"emojis\" :ent/emojis\n   \"props\" :block/props\n   \"string\" :block/string\n   \"text-align\" :block/text-align\n   \"time\" nil\n   \"title\" :node/title\n   \"uid\" :block/uid\n   \"users\" nil\n   \"heading\" :block/heading})\n\n\n(defn convert-key\n  [k]\n  (get str-kw-mappings k k))\n\n\n(defn parse-hms\n  \"Parses JSON retrieved from Roam's \\\"Export all as JSON\\\". Not fully functional.\"\n  [hms]\n  (if (not (coll? hms))\n    hms\n    (map #(reduce (fn [acc [k v]]\n                    (assoc acc (convert-key k) (parse-hms v)))\n                  {}\n                  %)\n         hms)))\n\n\n(defn parse-tuples\n  \"Parse tuples exported via method specified in https://roamresearch.com/#/app/ego/page/eJ14YtH2G.\"\n  [tuples]\n  (->> tuples\n       (partition 3)            ; chunk into 3-tuples\n       rest                     ; drop first tuple which is (?e ?a ?v)\n       (map #(map edn/read-string %))\n       (map #(cons :db/add %))))\n\n\n(defn json-str-to-edn\n  \"Convert a JSON str to EDN. May receive JSON through an HTTP request or file upload.\"\n  [json-str]\n  (->> json-str\n       (js/JSON.parse)\n       (js->clj)))\n\n\n(defn str-to-db-tx\n  \"Deserializes a JSON string into EDN and then Datoms.\"\n  [json-str]\n  (let [edn-data (json-str-to-edn json-str)]\n    (if (coll? (first edn-data))\n      (parse-hms edn-data)\n      (parse-tuples edn-data))))\n\n\n;; -- Datascript and Posh ------------------------------------------------\n\n(def schema\n  {:schema/version {}\n   :block/uid      {:db/unique :db.unique/identity}\n   :node/title     {:db/unique :db.unique/identity}\n   :attrs/lookup   {:db/cardinality :db.cardinality/many}\n   :block/children {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}\n   :block/refs     {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}})\n\n\n(defonce dsdb (d/create-conn schema))\n\n\n;; todo: turn into an effect\n(posh! dsdb)\n\n\n(defn e-by-av\n  [a v]\n  (-> (d/datoms @dsdb :avet a v) first :e))\n\n\n(defn v-by-ea\n  [e a]\n  (-> (d/datoms @dsdb :eavt e a) first :v))\n\n\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(between ?p ?lower-bound ?upper-bound ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?lower-bound)]\n     [(< ?o ?upper-bound)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]\n    [(plus-after ?p ?at ?ch ?new-o ?x)\n     (after ?p ?at ?ch ?o)\n     [(+ ?o ?x) ?new-o]]\n    [(minus-after ?p ?at ?ch ?new-o ?x)\n     (after ?p ?at ?ch ?o)\n     [(- ?o ?x) ?new-o]]\n    [(siblings ?uid ?sib-e)\n     [?e :block/uid ?uid]\n     [?p :block/children ?e]\n     [?p :block/children ?sib-e]]])\n\n\n(defn inc-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (inc-after ?p ?at ?ch ?new-o)]\n            @dsdb rules eid order)))\n\n\n(defn dec-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (dec-after ?p ?at ?ch ?new-o)]\n            @dsdb rules eid order)))\n\n\n(defn plus-after\n  [eid order x]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at ?x\n              :where (plus-after ?p ?at ?ch ?new-o ?x)]\n            @dsdb rules eid order x)))\n\n\n(defn minus-after\n  [eid order x]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at ?x\n              :where (minus-after ?p ?at ?ch ?new-o ?x)]\n            @dsdb rules eid order x)))\n\n\n(defn not-contains?\n  [coll v]\n  (not (contains? coll v)))\n\n\n(defn last-child?\n  [uid]\n  (->> (d/q '[:find ?sib-uid ?sib-o\n              :in $ % ?uid\n              :where\n              (siblings ?uid ?sib)\n              [?sib :block/uid ?sib-uid]\n              [?sib :block/order ?sib-o]]\n            @dsdb rules uid)\n       (sort-by second)\n       last\n       first\n       (= uid)))\n\n\n(defn uid-and-embed-id\n  [uid]\n  (or (some->> uid\n               (re-find #\"^(.+)-embed-(.+)\")\n               rest vec)\n      [uid nil]))\n\n\n(defn sort-block-children\n  [block]\n  (if-let [children (seq (:block/children block))]\n    (assoc block :block/children\n           (vec (sort-by :block/order (map sort-block-children children))))\n    block))\n\n\n(def block-document-pull-vector\n  '[:db/id :block/uid :block/string :block/open :block/order {:block/children ...} :block/refs :block/_refs])\n\n\n(def node-document-pull-vector\n  (-> block-document-pull-vector\n      (conj :node/title :page/sidebar)))\n\n\n(defn get-block-document\n  [id]\n  (->> @(pull dsdb block-document-pull-vector id)\n       sort-block-children))\n\n\n(defn get-node-document\n  [id]\n  (->> @(pull dsdb node-document-pull-vector id)\n       sort-block-children))\n\n\n(defn get-athens-datoms\n  \"Copy REPL output to athens-datoms.cljs\"\n  [id]\n  (->> @(pull dsdb (filter #(not (or (= % :db/id) (= % :block/_refs))) node-document-pull-vector) id)\n       sort-block-children))\n\n\n(defn shape-parent-query\n  \"Normalize path from deeply nested block to root node.\"\n  [pull-results]\n  (->> (loop [b   pull-results\n              res []]\n         (if (:node/title b)\n           (conj res b)\n           (recur (first (:block/_children b))\n                  (conj res (dissoc b :block/_children)))))\n       (rest)\n       (reverse)\n       vec))\n\n\n(defn get-parents-recursively\n  [id]\n  (->> @(pull dsdb '[:db/id :node/title :block/uid :block/string {:block/_children ...}] id)\n       shape-parent-query))\n\n\n(defn get-block\n  [id]\n  @(pull dsdb '[:db/id :node/title :block/uid :block/order :block/string {:block/children [:block/uid :block/order]} :block/open] id))\n\n\n(defn get-parent\n  [id]\n  (-> (d/entity @dsdb id)\n      :block/_children\n      first\n      :db/id\n      get-block))\n\n\n(defn get-older-sib\n  [uid]\n  (let [sib-uid   (d/q '[:find ?uid .\n                         :in $ % ?target-uid\n                         :where\n                         (siblings ?target-uid ?sib)\n                         [?target-e :block/uid ?target-uid]\n                         [?target-e :block/order ?target-o]\n                         [(dec ?target-o) ?prev-sib-order]\n                         [?sib :block/order ?prev-sib-order]\n                         [?sib :block/uid ?uid]]\n                       @dsdb rules uid)\n        older-sib (get-block [:block/uid sib-uid])]\n    older-sib))\n\n\n(defn same-parent?\n  \"Given a coll of uids, determine if uids are all direct children of the same parent.\"\n  [uids]\n  (let [parents (->> uids\n                     (mapv (comp first uid-and-embed-id))\n                     (d/q '[:find ?parents\n                            :in $ [?uids ...]\n                            :where\n                            [?e :block/uid ?uids]\n                            [?parents :block/children ?e]]\n                          @dsdb))]\n    (= (count parents) 1)))\n\n\n(defn deepest-child-block\n  [id]\n  (let [document (->> (d/pull @dsdb '[:block/order :block/uid {:block/children ...}] id)\n                      sort-block-children)]\n    (loop [block document]\n      (let [{:block/keys [children]} block\n            n (count children)]\n        (if (zero? n)\n          block\n          (recur (get children (dec n))))))))\n\n\n(defn get-children-recursively\n  \"Get list of children UIDs for given block ID (including the root block's UID)\"\n  [uid]\n  (when-let [eid (e-by-av :block/uid uid)]\n    (->> eid\n         (d/pull @dsdb '[:block/order :block/uid {:block/children ...}])\n         (tree-seq :block/children :block/children)\n         (map :block/uid))))\n\n\n(defn retract-page-recursively\n  \"Retract all blocks of a page, excluding the page. Used to reset athens/Welcome page.\n  Page is excluded because block/uid will be generated by walk-string if [[athens/Welcome]] doesn't already exist.\"\n  [title]\n  (let [eid (e-by-av :node/title title)\n        uid (v-by-ea eid :block/uid)]\n    (->> (get-children-recursively uid)\n         (mapv (fn [uid] [:db/retractEntity [:block/uid uid]]))\n         next)))\n\n\n(defn retract-uid-recursively\n  \"Retract all blocks of a page, including the page.\"\n  [uid]\n  (mapv (fn [uid] [:db/retractEntity [:block/uid uid]])\n        (get-children-recursively uid)))\n\n\n(defn re-case-insensitive\n  \"More options here https://clojuredocs.org/clojure.core/re-pattern\"\n  [query]\n  (re-pattern (str \"(?i)\" (escape-str query))))\n\n\n(defn search-exact-node-title\n  [query]\n  (d/q '[:find (pull ?node [:db/id :node/title :block/uid]) .\n         :in $ ?query\n         :where [?node :node/title ?query]]\n       @dsdb\n       query))\n\n\n(defn search-in-node-title\n  ([query] (search-in-node-title query 20 false))\n  ([query n] (search-in-node-title query n false))\n  ([query n ignore-dup]\n   (if (string/blank? query)\n     (vector)\n     (let [results (->> (d/q '[:find [(pull ?node [:db/id :node/title :block/uid]) ...]\n                               :in $ ?query-pattern ?query\n                               :where\n                               [?node :node/title ?title]\n                               [(re-find ?query-pattern ?title)]\n                               [(not= ?title ?query)]]                ;; ignore exact match to avoid duplicate\n                             @dsdb\n                             (re-case-insensitive query)\n                             (when ignore-dup query))\n                        (take n))]\n       results))))\n\n\n(defn get-root-parent-node\n  [block]\n  (loop [b block]\n    (cond\n      (:node/title b)       (assoc block :block/parent b)\n      (:block/_children b)  (recur (first (:block/_children b)))\n      ;; protect against orphaned nodes\n      :else                 nil)))\n\n\n(defn search-in-block-content\n  ([query] (search-in-block-content query 20))\n  ([query n]\n   (if (string/blank? query)\n     (vector)\n     (->>\n       (d/q '[:find [(pull ?block [:db/id :block/uid :block/string :node/title {:block/_children ...}]) ...]\n              :in $ ?query-pattern\n              :where\n              [?block :block/string ?txt]\n              [(re-find ?query-pattern ?txt)]]\n            @dsdb\n            (re-case-insensitive query))\n       (take n)\n       (map get-root-parent-node)\n       (remove nil?)\n       (mapv #(dissoc % :block/_children))))))\n\n\n(defn nth-sibling\n  \"Find sibling that has order+n of current block.\n  Negative n means previous sibling.\n  Positive n means next sibling.\"\n  [uid n]\n  (let [block      (get-block [:block/uid uid])\n        {:block/keys [order]} block\n        find-order (+ n order)]\n    (d/q '[:find (pull ?sibs [*]) .\n           :in $ % ?curr-uid ?find-order\n           :where\n           (siblings ?curr-uid ?sibs)\n           [?sibs :block/order ?find-order]]\n         @dsdb rules uid find-order)))\n\n\n(defn prev-block-uid\n  \"If order 0, go to parent.\n   If order n but block is closed, go to prev sibling.\n   If order n and block is OPEN, go to prev sibling's deepest child.\"\n  [uid]\n  (let [[uid embed-id]  (uid-and-embed-id uid)\n        block           (get-block [:block/uid uid])\n        parent          (get-parent [:block/uid uid])\n        prev-sibling    (nth-sibling uid -1)\n        {:block/keys    [open uid]} prev-sibling\n        prev-block      (cond\n                          (zero? (:block/order block)) parent\n                          (false? open) prev-sibling\n                          (true? open) (deepest-child-block [:block/uid uid]))]\n    (cond-> (:block/uid prev-block)\n      embed-id (str \"-embed-\" embed-id))))\n\n\n(defn next-sibling-recursively\n  \"Search for next sibling. If not there (i.e. is last child), find sibling of parent.\n  If parent is root, go to next sibling.\"\n  [uid]\n  (loop [uid uid]\n    (let [sib    (nth-sibling uid +1)\n          parent (get-parent [:block/uid uid])\n          {node :node/title}   (get-block [:block/uid uid])]\n      (if (or sib (:node/title parent) node)\n        sib\n        (recur (:block/uid parent))))))\n\n\n(defn next-block-uid\n  \"1-arity:\n    if open and children, go to child 0\n    else recursively find next sibling of parent\n  2-arity:\n    used for multi-block-selection; ignores child blocks\"\n  ([uid]\n   (let [[uid embed-id]       (uid-and-embed-id uid)\n         block                (->> (get-block [:block/uid uid])\n                                   sort-block-children)\n         {:block/keys [children open] node :node/title} block\n         next-block-recursive (next-sibling-recursively uid)\n         next-block           (cond\n                                (and (or open node) children) (first children)\n                                next-block-recursive          next-block-recursive)]\n     (cond-> (:block/uid next-block)\n\n       ;; only go to next block if it's part of current embed scheme\n       (and embed-id (js/document.querySelector (str \"#editable-uid-\" (:block/uid next-block) \"-embed-\" embed-id)))\n       (str \"-embed-\" embed-id))))\n  ([uid selection?]\n   (if selection?\n     (let [[o-uid embed-id]     (uid-and-embed-id uid)\n           next-block-recursive (next-sibling-recursively o-uid)]\n       (cond-> (:block/uid next-block-recursive)\n\n         ;; only go to next block if it's part of current embed scheme\n         (and embed-id (js/document.querySelector (str \"#editable-uid-\" (:block/uid next-block-recursive) \"-embed-\" embed-id)))\n         (str \"-embed-\" embed-id)))\n     (next-block-uid uid))))\n\n;; history\n\n(defonce history (atom []))\n(def ^:const history-limit 10)\n\n\n(defn drop-tail\n  [xs pred]\n  (loop [acc []\n         xs  xs]\n    (let [x (first xs)]\n      (cond\n        (nil? x) acc\n        (pred x) (conj acc x)\n        :else  (recur (conj acc x) (next xs))))))\n\n\n(defn trim-head\n  [xs n]\n  (vec (drop (- (count xs) n) xs)))\n\n\n(defn find-prev\n  [xs pred]\n  (last (take-while #(not (pred %)) xs)))\n\n\n(defn find-next\n  [xs pred]\n  (fnext (drop-while #(not (pred %)) xs)))\n\n\n(d/listen! dsdb :history\n           (fn [tx-report]\n             (let [{:keys [db-before db-after]} tx-report]\n               (when (and db-before db-after)\n                 (swap! history (fn [h]\n                                  (-> h\n                                      (drop-tail #(identical? % db-before))\n                                      (conj db-after)\n                                      (trim-head history-limit))))))))\n\n;; -- Linked & Unlinked References ----------\n\n(defn get-ref-ids\n  [pattern]\n  @(q '[:find [?e ...]\n        :in $ ?regex\n        :where\n        [?e :block/string ?s]\n        [(re-find ?regex ?s)]]\n      dsdb\n      pattern))\n\n\n(defn merge-parents-and-block\n  [ref-ids]\n  (let [parents (reduce-kv (fn [m _ v] (assoc m v (get-parents-recursively v)))\n                           {}\n                           ref-ids)\n        blocks (map (fn [id] (get-block-document id)) ref-ids)]\n    (mapv\n      (fn [block]\n        (merge block {:block/parents (get parents (:db/id block))}))\n      blocks)))\n\n\n(defn group-by-parent\n  [blocks]\n  (group-by (fn [x]\n              (-> x\n                  :block/parents\n                  first\n                  :node/title))\n            blocks))\n\n\n(defn get-data\n  [pattern]\n  (-> pattern get-ref-ids merge-parents-and-block group-by-parent seq))\n\n\n(defn get-linked-references\n  \"For node-page references UI.\"\n  [title]\n  (->> @(pull dsdb '[* :block/_refs] [:node/title title])\n       :block/_refs\n       (mapv :db/id)\n       merge-parents-and-block\n       group-by-parent\n       vec))\n\n\n(defn get-linked-block-references\n  \"For block-page references UI.\"\n  [block]\n  (->> (:block/_refs block)\n       (mapv :db/id)\n       merge-parents-and-block\n       group-by-parent\n       vec))\n\n\n(defn get-unlinked-references\n  \"For node-page references UI.\"\n  [title]\n  (-> title patterns/unlinked get-data))\n\n\n(defn linked-refs-count\n  [title]\n  (d/q '[:find (count ?u) .\n         :in $ ?t\n         :where\n         [?e :node/title ?t]\n         [?r :block/refs ?e]\n         [?r :block/uid ?u]]\n       @dsdb\n       title))\n\n\n(defn replace-linked-refs\n  \"For a given title, unlinks [[brackets]], #[[brackets]], and #brackets.\"\n  [title]\n  (let [pattern (patterns/linked title)]\n    (->> pattern\n         get-ref-ids\n         (d/pull-many @dsdb [:db/id :block/string])\n         (mapv (fn [x]\n                 (let [new-str (string/replace (:block/string x) pattern title)]\n                   (assoc x :block/string new-str)))))))\n\n\n(defn pull-nil\n  [db selector id]\n  (try\n    (d/pull db selector id)\n    (catch js/Error _e\n      nil)))\n\n\n;; -- save ------------------------------------------------------------\n\n\n(defn transact-state-for-uid\n  \"uid -> Current block\n   state -> Look at state atom in block-el\"\n  [uid state]\n  (let [{:string/keys [local previous]} @state\n        eid (e-by-av :block/uid uid)]\n    (when (and (not= local previous) eid)\n      (swap! state assoc :string/previous local)\n      (let [new-block-string {:db/id [:block/uid uid] :block/string local}\n            tx-data          [new-block-string]]\n        (dispatch [:transact tx-data])))))\n"]}