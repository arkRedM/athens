{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","target","cljs.core.js__GT_clj","goog.dom.selection/getEndPoints","athens.keybindings/set-cursor-position","idx","goog.dom.selection/setCursorPosition","athens.keybindings/destruct-target","vec__65110","cljs.core.nth","value","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs","tail","cljs.core.merge","athens.keybindings/destruct-key-down","key","key-code","event","modifiers","target-data","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","cljs.core/contains?","athens.keybindings/slash-options","js/module$node_modules$$material_ui$icons$index.Done","js/module$node_modules$$material_ui$icons$index.Timer","js/Date","cljs.core/clj->js","js/module$node_modules$$material_ui$icons$index.Today","athens.util.get_day","js/module$node_modules$$material_ui$icons$index.YouTube","js/module$node_modules$$material_ui$icons$index.DesktopWindows","js/module$node_modules$$material_ui$icons$index.ViewDayRounded","athens.keybindings/filter-slash-options","query","clojure.string/blank?","cljs.core/filterv","p__65114","vec__65115","text","cljs.core/re-find","cljs.core/re-pattern","athens.keybindings/update-query","state","type","query-fn","G__65118","cljs.core/Keyword","js/Error","athens.db/search-in-block-content","athens.db/search-in-node-title","regex","G__65119","find","query-start-idx","cljs.core/count","new-query","results","cljs.core._EQ_","cljs.core/empty?","cljs.core.swap_BANG_","cljs.core/assoc","var_args","G__65121","athens.keybindings/auto-complete-slash","map__65122","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__65123","vec__65124","index","n","_","expansion","pos","expand","cljs.core/fn?","start-idx","new-head","new-str","new-idx","item","map__65130","vec__65131","G__65140","athens.keybindings/auto-complete-hashtag","map__65141","map__65142","map__65143","title","uid","or__4126__auto__","map__65150","G__65153","athens.keybindings/auto-complete-inline","map__65154","map__65155","map__65156","vec__65157","block?","page?","head-pattern","tail-pattern","closing-str","replacement","replace-str","clojure.string/replace-first","matches","cljs.core/re-matches","after-closing-str","goog.dom.selection/setStart","map__65163","map__65164","vec__65165","athens.keybindings/block-start?","vec__65170","athens.keybindings/block-end?","map__65173","athens.keybindings/dec-cycle","min","max","athens.keybindings/inc-cycle","athens.keybindings/cycle-list","up?","down?","f","athens.keybindings/max-idx","coll","athens.keybindings/handle-arrow-key","map__65175","map__65176","map__65177","selection?","start?","end?","caret-position","textarea-height","top","height","rows","js/Math.round","row","js/Math.ceil","top-row?","bottom-row?","left?","right?","re-frame.core/dispatch","vec__65181","athens.db/uid-and-embed-id","new-open-state","cur-index","min-index","max-index","next-index","container-el","goog.dom/getElement","target-el","athens.util/scroll-if-needed","athens.keybindings/handle-tab","_state","map__65184","vec__65185","d-key-down","selected-items","re_frame.core.subscribe","o-uid","_embed-id","athens.keybindings/handle-escape","athens.keybindings/throttle-dispatch","p1__65189#","goog.functions/throttle","athens.keybindings/handle-enter","map__65190","map__65191","G__65194","athens.keybindings.auto_complete_slash","athens.keybindings.auto_complete_inline","athens.keybindings.auto_complete_hashtag","athens.util/shortcut-key?","first","new-tail","G__65195","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-shortcuts","map__65196","cljs.core.not_EQ_","goog.events.KeyCodes/A","closest-node-page","closest-block-page","closest","block","athens.db/get-block","children","cljs.core.sort_by","cljs.core.mapv","goog.events.KeyCodes/Z","map__65198","local","previous","goog.events.KeyCodes/B","goog.dom.selection/setEnd","goog.events.KeyCodes/O","vec__65200","link","hashtag","block-ref","athens.db/transact-state-for-uid","and__4115__auto__","eid","athens.db/e-by-av","athens.db/v-by-ea","athens.router.navigate_uid","new-uid","athens.util/gen-block-uid","js/setTimeout","athens.keybindings/pair-char?","map__65203","pair-char-set","cljs.core/seq","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__65205","close-pair","lookbehind-char","four-char","double-brackets?","double-parens?","surround-selection","athens.keybindings/handle-backspace","map__65207","map__65208","no-selection?","sub-str","possible-pair","fexpr__65210","look-behind-char","athens.keybindings/is-character-key?","map__65212","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__65214","map__65215","athens.keybindings/handle-delete","map__65218","vec__65219","next-block-uid","athens.db.next_block_uid","next-block","athens.keybindings/textarea-key-down","map__65223","d-event","athens.util/get-caret-position","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/DELETE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.router :as router]\n    [athens.util :refer [scroll-if-needed get-day get-caret-position shortcut-key?]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :refer [replace-first blank?]]\n    [goog.dom :refer [getElement]]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [goog.functions :refer [throttle]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Event Helpers\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [target]\n  (js->clj (getEndPoints target)))\n\n\n(defn set-cursor-position\n  [target idx]\n  (setCursorPosition target idx))\n\n\n(defn destruct-target\n  [target]\n  (let [value (.. target -value)\n        [start end] (get-end-points target)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge {:value value}\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(defn destruct-key-down\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        target-data (destruct-target target)]\n    (merge modifiers\n           event\n           target-data)))\n\n\n(def ARROW-KEYS\n  #{KeyCodes.UP\n    KeyCodes.LEFT\n    KeyCodes.DOWN\n    KeyCodes.RIGHT})\n\n\n(defn arrow-key-direction\n  [e]\n  (contains? ARROW-KEYS (.. e -keyCode)))\n\n\n;;; Dropdown: inline-search and slash commands\n\n;; TODO: some expansions require caret placement after\n(def slash-options\n  [[\"Add Todo\"      mui-icons/Done \"{{[[TODO]]}} \" \"cmd-enter\" nil]\n   [\"Current Time\"  mui-icons/Timer (fn [] (.. (js/Date.) (toLocaleTimeString [] (clj->js {\"timeStyle\" \"short\"})))) nil nil]\n   [\"Today\"         mui-icons/Today (fn [] (str \"[[\" (:title (get-day 0)) \"]] \")) nil nil]\n   [\"Tomorrow\"      mui-icons/Today (fn [] (str \"[[\" (:title (get-day -1)) \"]]\")) nil nil]\n   [\"Yesterday\"     mui-icons/Today (fn [] (str \"[[\" (:title (get-day 1)) \"]]\")) nil nil]\n   [\"YouTube Embed\" mui-icons/YouTube \"{{[[youtube]]: }}\" nil 2]\n   [\"iframe Embed\"  mui-icons/DesktopWindows \"{{iframe: }}\" nil 2]\n   [\"Block Embed\"   mui-icons/ViewDayRounded \"{{[[embed]]: (())}}\" nil 4]])\n\n;;[mui-icons/ \"Block Embed\" #(str \"[[\" (:title (get-day 1)) \"]]\")]\n;;[mui-icons/DateRange \"Date Picker\"]\n;;[mui-icons/Attachment \"Upload Image or File\"]\n;;[mui-icons/ExposurePlus1 \"Word Count\"]\n\n\n(defn filter-slash-options\n  [query]\n  (if (blank? query)\n    slash-options\n    (filterv (fn [[text]]\n               (re-find (re-pattern (str \"(?i)\" query)) text))\n             slash-options)))\n\n\n(defn update-query\n  \"Used by backspace and write-char.\n  write-char appends key character. Pass empty string during backspace.\n  query-start is determined by doing a greedy regex find up to head.\n  Head goes up to the text caret position.\"\n  [state head key type]\n  (let [query-fn        (case type\n                          :block db/search-in-block-content\n                          :page db/search-in-node-title\n                          :hashtag db/search-in-node-title\n                          :slash filter-slash-options)\n        regex           (case type\n                          :block #\"(?s).*\\(\\(\"\n                          :page #\"(?s).*\\[\\[\"\n                          :hashtag #\"(?s).*#\"\n                          :slash #\"(?s).*/\")\n        find            (re-find regex head)\n        query-start-idx (count find)\n        new-query       (str (subs head query-start-idx) key)\n        results         (query-fn new-query)]\n    (if (and (= type :slash) (empty? results))\n      (swap! state assoc :search/type nil)\n      (swap! state assoc\n             :search/index 0\n             :search/query new-query\n             :search/results results))))\n\n\n;; 1- if no results, just hide slash commands so this doesnt get triggered\n;; 2- if results, do find and replace properly\n(defn auto-complete-slash\n  ([state e]\n   (let [{:search/keys [index results]} @state\n         {:keys [value head tail target]} (destruct-key-down e)\n         [n _ expansion _ pos] (nth results index)\n         expand    (if (fn? expansion) (expansion) expansion)\n         start-idx (dec (count (re-find #\"(?s).*/\" head)))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head expand tail)]\n     (swap! state assoc\n            :search/type nil\n            :string/local new-str)\n     (set! (.-value target) new-str)\n     (when pos\n       (let [new-idx (- (count (str new-head expand)) pos)]\n         (set-cursor-position target new-idx)\n         (when (= n \"Block Embed\")\n           (swap! state assoc :search/type :block\n                  :search/query \"\" :search/results []))))))\n  ([state target item]\n   (let [{:keys [value head tail]} (destruct-target target)\n         [_ _ expansion _ pos] item\n         expand    (if (fn? expansion) (expansion) expansion)\n         start-idx (dec (count (re-find #\"(?s).*/\" head)))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head expand tail)]\n     (swap! state assoc\n            :search/type nil\n            :string/local new-str)\n     (set! (.-value target) new-str)\n     (when pos\n       (let [new-idx (- (count (str new-head expand)) pos)]\n         (set-cursor-position target new-idx))))))\n\n\n(defn auto-complete-hashtag\n  ([state e]\n   (let [{:search/keys [index results]} @state\n         {:keys [node/title block/uid]} (nth results index nil)\n         {:keys [value head tail]} (destruct-key-down e)\n         expansion (or title uid)\n         start-idx (count (re-find #\"(?s).*#\" head))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head \"[[\" expansion \"]]\" tail)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc\n              :search/type nil\n              :string/local new-str))))\n  ([state target expansion]\n   (let [{:keys [value head tail]} (destruct-target target)\n         start-idx (count (re-find #\"(?s).*#\" head))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head \"[[\" expansion \"]]\" tail)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc\n              :search/type nil\n              :string/local new-str)))))\n\n\n(defn auto-complete-inline\n  ([state e]\n   (let [{:search/keys [query type index results]} @state\n         {:keys [node/title block/uid]} (nth results index nil)\n         {:keys [start head tail target]} (destruct-key-down e)\n         expansion    (or title uid)\n         block?       (= type :block)\n         page?        (= type :page)\n         ;; rewrite this more cleanly\n         head-pattern (cond block? (re-pattern (str \"(?s)(.*)\\\\(\\\\(\" query))\n                            page? (re-pattern (str \"(?s)(.*)\\\\[\\\\[\" query)))\n         tail-pattern (cond block? #\"(?s)(\\)\\))?(.*)\"\n                            page? #\"(?s)(\\]\\])?(.*)\")\n         new-head     (cond block? \"$1((\"\n                            page? \"$1[[\")\n         closing-str  (cond block? \"))\"\n                            page? \"]]\")\n         replacement  (str new-head expansion closing-str)\n         replace-str  (replace-first head head-pattern replacement)\n         matches      (re-matches tail-pattern tail)\n         [_ _ after-closing-str] matches\n         new-str      (str replace-str after-closing-str)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc :search/type nil :string/local new-str))\n     (setStart target (+ 2 start))))\n  ([state target expansion]\n   (let [{:search/keys [query type]} @state\n         {:keys [start head tail]} (destruct-target target)\n         block?       (= type :block)\n         page?        (= type :page)\n         ;; rewrite this more cleanly\n         head-pattern (cond block? (re-pattern (str \"(?s)(.*)\\\\(\\\\(\" query))\n                            page? (re-pattern (str \"(?s)(.*)\\\\[\\\\[\" query)))\n         tail-pattern (cond block? #\"(?s)(\\)\\))?(.*)\"\n                            page? #\"(?s)(\\]\\])?(.*)\")\n         new-head     (cond block? \"$1((\"\n                            page? \"$1[[\")\n         closing-str  (cond block? \"))\"\n                            page? \"]]\")\n         replacement  (str new-head expansion closing-str)\n         replace-str  (replace-first head head-pattern replacement)\n         matches      (re-matches tail-pattern tail)\n         [_ _ after-closing-str] matches\n         new-str      (str replace-str after-closing-str)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc :search/type nil :string/local new-str))\n     (setStart target (+ 2 start)))))\n\n\n;;; Arrow Keys\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points (.. e -target))]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-key-down e)]\n    (= end (count value))))\n\n\n(defn dec-cycle\n  [min max idx]\n  (if (<= idx min)\n    max\n    (dec idx)))\n\n\n(defn inc-cycle\n  [min max idx]\n  (if (>= idx max)\n    min\n    (inc idx)))\n\n\n(defn cycle-list\n  \"If user has slash menu or inline search dropdown open:\n  - pressing down increments index\n  - pressing up decrements index\n  0 is typically min index\n  max index is collection length minus 1\"\n  [min max idx up? down?]\n  (let [f (cond up? dec-cycle\n                down? inc-cycle)]\n    (f min max idx)))\n\n\n(defn max-idx\n  [coll]\n  (-> coll count dec))\n\n\n(defn handle-arrow-key\n  [e uid state]\n  (let [{:keys [key-code shift ctrl target selection]} (destruct-key-down e)\n        selection?      (not (blank? selection))\n        start?          (block-start? e)\n        end?            (block-end? e)\n        {:search/keys [results type index] caret-position :caret-position} @state\n        textarea-height (.. target -offsetHeight)\n        {:keys [top height]} caret-position\n        rows            (js/Math.round (/ textarea-height height))\n        row             (js/Math.ceil (/ top height))\n        top-row?        (= row 1)\n        bottom-row?     (= row rows)\n        up?             (= key-code KeyCodes.UP)\n        down?           (= key-code KeyCodes.DOWN)\n        left?           (= key-code KeyCodes.LEFT)\n        right?          (= key-code KeyCodes.RIGHT)]\n\n    (cond\n      ;; Shift: select block if leaving block content boundaries (top or bottom rows). Otherwise select textarea text (default)\n      shift (cond\n              left? nil\n              right? nil\n              (or (and up? top-row?)\n                  (and down? bottom-row?)) (do\n                                             (.. target blur)\n                                             (dispatch [:selected/add-item uid])))\n\n      ;; Control: fold or unfold blocks\n      ctrl (cond\n             left? nil\n             right? nil\n             (or up? down?) (let [[uid _]        (db/uid-and-embed-id uid)\n                                  new-open-state (cond\n                                                   up? false\n                                                   down? true)\n                                  event [:transact [[:db/add [:block/uid uid] :block/open new-open-state]]]]\n                              (.. e preventDefault)\n                              (dispatch event)))\n\n      ;; Type, one of #{:slash :block :page}: If slash commands or inline search is open, cycle through options\n      type (cond\n             (or left? right?) (swap! state assoc :search/index 0 :search/type nil)\n             (or up? down?) (let [cur-index    index\n                                  min-index    0\n                                  max-index    (max-idx results)\n                                  next-index   (cycle-list min-index max-index cur-index up? down?)\n                                  container-el (getElement \"dropdown-menu\")\n                                  target-el    (getElement (str \"dropdown-item-\" next-index))]\n                              (.. e preventDefault)\n                              (swap! state assoc :search/index next-index)\n                              (scroll-if-needed target-el container-el)))\n\n      selection? nil\n\n      ;; Else: navigate across blocks\n      (or (and up? top-row?)\n          (and left? start?)) (do (.. e preventDefault)\n                                  (dispatch [:up uid]))\n      (or (and down? bottom-row?)\n          (and right? end?)) (do (.. e preventDefault)\n                                 (dispatch [:down uid])))))\n\n\n;;; Tab\n\n(defn handle-tab\n  \"Bug: indenting sets the cursor position to 0, likely because a new textarea element is created on the DOM. Set selection appropriately.\n  See :indent event for why value must be passed as well.\"\n  [e uid _state]\n  (.. e preventDefault)\n  (let [{:keys [shift] :as d-key-down} (destruct-key-down e)\n        selected-items                 @(subscribe [:selected/items])\n        [o-uid _embed-id]              (db/uid-and-embed-id uid)]\n    (when (empty? selected-items)\n      (if shift\n        (dispatch [:unindent uid d-key-down])\n        (dispatch [:indent o-uid d-key-down])))))\n\n\n(defn handle-escape\n  \"BUG: escape is fired 24 times for some reason.\"\n  [e state]\n  (.. e preventDefault)\n  (swap! state assoc :search/type nil)\n  (dispatch [:editing/uid nil]))\n\n;;; Enter\n\n(def throttle-dispatch (throttle #(dispatch %) 100))\n\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift ctrl meta head tail value] :as d-key-down} (destruct-key-down e)\n        {:search/keys [type]} @state]\n    (.. e preventDefault)\n    (cond\n      type (case type\n             :slash (auto-complete-slash state e)\n             :page (auto-complete-inline state e)\n             :block (auto-complete-inline state e)\n             :hashtag (auto-complete-hashtag state e))\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :string/local (str head \"\\n\" tail))\n      ;; cmd-enter: cycle todo states. 13 is the length of the {{[[TODO]]}} string\n      (shortcut-key? meta ctrl) (let [first    (subs value 0 13)\n                                      new-tail (subs value 13)\n                                      new-str  (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                                                     (= first \"{{[[DONE]]}} \") new-tail\n                                                     :else (str \"{{[[TODO]]}} \" value))]\n                                  (swap! state assoc :string/local new-str))\n      ;; default: may mutate blocks\n      :else (throttle-dispatch [:enter uid d-key-down]))))\n\n\n;;; Pair Chars: auto-balance for backspace and writing chars\n\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: put text caret in correct position\n(defn handle-shortcuts\n  [e uid state]\n  (let [{:keys [key-code head tail selection start end target value]} (destruct-key-down e)\n        selection? (not= start end)]\n\n    (cond\n      (and (= key-code KeyCodes.A) (= selection value)) (let [closest-node-page  (.. target (closest \".node-page\"))\n                                                              closest-block-page (.. target (closest \".block-page\"))\n                                                              closest            (or closest-node-page closest-block-page)\n                                                              block              (db/get-block [:block/uid (.. closest -dataset -uid)])\n                                                              children           (->> (:block/children block)\n                                                                                      (sort-by :block/order)\n                                                                                      (mapv :block/uid))]\n                                                          (dispatch [:selected/add-items children]))\n      ;; When undo no longer makes changes for local textarea, do datascript undo.\n      (= key-code KeyCodes.Z) (let [{:string/keys [local previous]} @state]\n                                (when (= local previous)\n                                  (dispatch [:undo])))\n      (= key-code KeyCodes.B) (let [new-str (str head (surround selection \"**\") tail)]\n                                (swap! state assoc :string/local new-str)\n                                (set! (.-value target) new-str)\n                                (if selection?\n                                  (do (setStart target (+ 2 start))\n                                      (setEnd target (+ 2 end)))\n                                  (set-cursor-position target (+ 2 start))))\n\n      ;; Disabling keybinding for now https://github.com/athensresearch/athens/issues/556\n      ;; TODO fix to make keybinding (\"Ctrl-i\") change font-style to italic\n\n      #_ (and (not shift) (= key-code KeyCodes.I))\n      #_(let [new-str (str head (surround selection \"__\") tail)]\n          (swap! state assoc :string/local new-str)\n          (set! (.-value target) new-str)\n          (if selection?\n            (do (setStart target (+ 2 start))\n                (setEnd target (+ 2 end)))\n            (set-cursor-position target (+ 2 start))))\n\n      ;; if caret within [[brackets]] or #[[brackets]], navigate to that page\n      ;; if caret on a #hashtag, navigate to that page\n      ;; if caret within ((uid)), navigate to that uid\n      ;; otherwise zoom into current block\n\n      (= key-code KeyCodes.O) (let [[uid _]   (db/uid-and-embed-id uid)\n                                    link      (str (replace-first head #\"(?s)(.*)\\[\\[\" \"\")\n                                                   (replace-first tail #\"(?s)\\]\\](.*)\" \"\"))\n                                    hashtag   (str (replace-first head #\"(?s).*#\" \"\")\n                                                   (replace-first tail #\"(?s)\\s(.*)\" \"\"))\n                                    block-ref (str (replace-first head #\"(?s)(.*)\\(\\(\" \"\")\n                                                   (replace-first tail #\"(?s)\\)\\)(.*)\" \"\"))]\n\n                                ;; save block before navigating away\n                                (db/transact-state-for-uid uid state)\n\n                                (cond\n                                  (and (re-find #\"(?s)\\[\\[\" head)\n                                       (re-find #\"(?s)\\]\\]\" tail)\n                                       (nil? (re-find #\"(?s)\\[\" link))\n                                       (nil? (re-find #\"(?s)\\]\" link)))\n                                  (let [eid (db/e-by-av :node/title link)\n                                        uid (db/v-by-ea eid :block/uid)]\n                                    (if eid\n                                      (router/navigate-uid uid e)\n                                      (let [new-uid (athens.util/gen-block-uid)]\n                                        (.blur target)\n                                        (dispatch [:page/create link new-uid])\n                                        (js/setTimeout #(router/navigate-uid new-uid e) 50))))\n\n                                  ;; same logic as link\n                                  (and (re-find #\"(?s)#\" head)\n                                       (re-find #\"(?s)\\s\" tail))\n                                  (let [eid (db/e-by-av :node/title hashtag)\n                                        uid (db/v-by-ea eid :block/uid)]\n                                    (if eid\n                                      (router/navigate-uid uid e)\n                                      (let [new-uid (athens.util/gen-block-uid)]\n                                        (.blur target)\n                                        (dispatch [:page/create link new-uid])\n                                        (js/setTimeout #(router/navigate-uid new-uid e) 50))))\n\n                                  (and (re-find #\"(?s)\\(\\(\" head)\n                                       (re-find #\"(?s)\\)\\)\" tail)\n                                       (nil? (re-find #\"(?s)\\(\" block-ref))\n                                       (nil? (re-find #\"(?s)\\)\" block-ref))\n                                       (db/e-by-av :block/uid block-ref))\n                                  (router/navigate-uid block-ref e)\n\n                                  :else (router/navigate-uid uid e))))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-key-down e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection value]} (destruct-key-down e)\n        close-pair (get PAIR-CHARS key)\n        lookbehind-char (nth value start nil)]\n    (.. e preventDefault)\n\n    (cond\n      ;; when close char, increment caret index without writing more\n      (or (= \")\" key lookbehind-char)\n          (= \"}\" key lookbehind-char)\n          (= \"\\\"\" key lookbehind-char)\n          (= \"]\" key lookbehind-char)) (do (setStart target (inc start))\n                                           (swap! state assoc :search/type nil))\n\n      (= selection \"\") (let [new-str (str head key close-pair tail)\n                             new-idx (inc start)]\n                         (swap! state assoc :string/local new-str)\n                         (set! (.-value target) new-str)\n                         (set-cursor-position target new-idx)\n                         (when (>= (count (:string/local @state)) 4)\n                           (let [four-char        (subs (:string/local @state) (dec start) (+ start 3))\n                                 double-brackets? (= \"[[]]\" four-char)\n                                 double-parens?   (= \"(())\" four-char)\n                                 type             (cond double-brackets? :page\n                                                        double-parens? :block)]\n                             (when type\n                               (swap! state assoc :search/type type :search/query \"\" :search/results [])))))\n\n      (not= selection \"\") (let [surround-selection (surround selection key)\n                                new-str            (str head surround-selection tail)]\n                            (swap! state assoc :string/local new-str)\n                            (set! (.-value target) new-str)\n                            (set! (.-selectionStart target) (inc start))\n                            (set! (.-selectionEnd target) (inc end))\n                            (let [four-char        (str (subs (:string/local @state) (dec start) (inc start))\n                                                        (subs (:string/local @state) (+ end 1) (+ end 3)))\n                                  double-brackets? (= \"[[]]\" four-char)\n                                  double-parens?   (= \"(())\" four-char)\n                                  type             (cond double-brackets? :page\n                                                         double-parens? :block)\n                                  query-fn         (cond double-brackets? db/search-in-node-title\n                                                         double-parens? db/search-in-block-content)]\n                              (when type\n                                (swap! state assoc :search/type type :search/query selection :search/results (query-fn selection))))))))\n\n\n;; Backspace\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start value target end]} (destruct-key-down e)\n        no-selection? (= start end)\n        sub-str (subs value (dec start) (inc start))\n        possible-pair (#{\"[]\" \"{}\" \"()\"} sub-str)\n        head    (subs value 0 (dec start))\n        {:search/keys [type]} @state\n        look-behind-char (nth value (dec start) nil)]\n\n    (cond\n      (and (block-start? e) no-selection?) (dispatch [:backspace uid value])\n      ;; pair char: hide inline search and auto-balance\n      possible-pair (let [head    (subs value 0 (dec start))\n                          tail    (subs value (inc start))\n                          new-str (str head tail)\n                          new-idx (dec start)]\n                      (.. e preventDefault)\n                      (swap! state assoc\n                             :search/type nil\n                             :string/local new-str)\n                      (set! (.-value target) new-str)\n                      (set-cursor-position target new-idx))\n\n      ;; slash: close dropdown\n      (and (= \"/\" look-behind-char) (= type :slash)) (swap! state assoc :search/type nil)\n      ;; hashtag: close dropdown\n      (and (= \"#\" look-behind-char) (= type :hashtag)) (swap! state assoc :search/type nil)\n      ;; dropdown is open: update query\n      type (update-query state head \"\" type))))\n\n\n;; Character: for queries\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-key-down e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  \"When user types /, trigger slash menu.\n  If user writes a character while there is a slash/type, update query and results.\"\n  [e uid state]\n  (let [{:keys [head key]} (destruct-key-down e)\n        {:search/keys [type]} @state]\n    (cond\n      (and (= key \" \") (= type :hashtag)) (swap! state assoc\n                                                 :search/type nil\n                                                 :search/results [])\n      (and (= key \"/\") (nil? type)) (swap! state assoc\n                                           :search/index 0\n                                           :search/query \"\"\n                                           :search/type :slash\n                                           :search/results slash-options)\n      (and (= key \"#\") (nil? type)) (swap! state assoc\n                                           :search/index 0\n                                           :search/query \"\"\n                                           :search/type :hashtag\n                                           :search/results [])\n      type (update-query state head key type))))\n\n\n(defn handle-delete\n  \"Delete has the same behavior as pressing backspace on the next block.\"\n  [e uid _state]\n  (let [{:keys [start end value]} (destruct-key-down e)\n        no-selection?             (= start end)\n        end?                      (= end (count value))\n        ;; using original block uid(o-uid) data to get next block\n        [o-uid _embed-id]         (db/uid-and-embed-id uid)\n        next-block-uid            (db/next-block-uid o-uid)]\n    (when (and no-selection? end? next-block-uid)\n      (let [next-block (db/get-block [:block/uid next-block-uid])]\n        (dispatch [:backspace next-block-uid (:block/string next-block)])))))\n\n\n(defn textarea-key-down\n  [e uid state]\n  (let [d-event (destruct-key-down e)\n        {:keys [meta ctrl key-code]} d-event]\n\n    ;; used for paste, to determine if shift key was held down\n    (swap! state assoc :last-keydown d-event)\n\n    ;; update caret position for search dropdowns and for up/down\n    (when (nil? (:search/type @state))\n      (let [caret-position (get-caret-position (.. e -target))]\n        (swap! state assoc :caret-position caret-position)))\n\n    ;; dispatch center\n    ;; only when nothing is selected or duplicate/events dispatched\n    ;; after some ops(like delete) can cause errors\n    (when (empty? @(subscribe [:selected/items]))\n      (cond\n        (arrow-key-direction e)         (handle-arrow-key e uid state)\n        (pair-char? e)                  (handle-pair-char e uid state)\n        (= key-code KeyCodes.TAB)       (handle-tab e uid state)\n        (= key-code KeyCodes.ENTER)     (handle-enter e uid state)\n        (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n        (= key-code KeyCodes.DELETE)    (handle-delete e uid state)\n        (= key-code KeyCodes.ESC)       (handle-escape e state)\n        (shortcut-key? meta ctrl)       (handle-shortcuts e uid state)\n        (is-character-key? e)           (write-char e uid state)))))\n"]}