{"version":3,"sources":["athens/components.cljs"],"mappings":";;AAYA,AAAA,AAAMA,AACHC,AAAIC,AAASC;AADhB,AAEE,AAAMC,AAAsB,AAAA,AAAe,AAAA,AAAA,AAACC,AAAyBJ;AAArE,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACK,AAAoCL,AACA,AAACM,AACCH,AACAF,AACAC,AACF,AAACK;;AAG1C,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAEoB,AAAKC;AAAL,AACE,AAAIA;;;AAG1B,AAAAC,AAAA,AAAA,AACGC,AAASX;AADZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGQ;AAFH,AAKwB,AAAA,AAAA,AAACT,AAAcC;;;AAGvC,AAAAU,AAAA,AAAA,AACGC,AAASX;AADZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGQ;AAFH,AAKwB,AAAA,AAAA,AAACT,AAAcC;;;AAGvC,AAAAU,AAAA,AAAA,AACGE,AAAQC;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGL,AAEkB,AAAA,AAAsC,AAAA,AAACM,AAAI,AAAA,AAACC,AAAiCH;;AAIlG,AAAAF,AAAA,AAAA,AACGE,AAAQC;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGL,AAEgB,AAAA,AAACO,AAAkBH;;AAGtC,AAAAF,AAAA,AAAA,AACGE,AAAQC;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEGL,AAGCI;;AAGJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKI,AACU,AAAA,AAAA,AAACC;AAahB,AAAAP,AAAA,AAAA,AACGE,AAAQZ;AADX,AAAA,AAAA,AAEoB,AAACkB,AAAUF,AAC5B,AAAMG,AAAM,AAAK,AAAA,AAACJ,AAAwBH,AACzBQ,AAAK,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAoBC;AAD1C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGIC,AACA,AAACC,AAAmCL,AAAM,AAACM,AAG5C,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAW,AAAA,AAAA,AAACC,AAA+B3B,AACrC4B,AACQ,AAAKnB;AAAL,AACE,AAAIA;;AACJ,AAAA,AAAA,AAACJ,AAAuBL","names":["athens.components/todo-on-click","uid","from-str","to-str","current-block-content","athens.db/get-block","re-frame.core/dispatch","clojure.string/replace","athens.util/now-ts","athens.components/span-click-stop","e","athens.parse-renderer/component","_content","content","_uid","cljs.core.get","cljs.core/re-find","athens.components/block-embed-adjustments","athens.style.color","stylefy.core.use_style","block","cljs.core/last","cljs.core/PersistentVector","athens.db/get-block-document","athens.views.blocks/block-el","athens.util/recursively-modify-block-for-embed","cljs.core/random-uuid","cljs.core/deref","re_frame.core.subscribe","js/module$node_modules$$material_ui$icons$index.Edit"],"sourcesContent":["(ns athens.components\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.parse-renderer :refer [component]]\n    [athens.style :refer [color]]\n    [athens.util :refer [now-ts recursively-modify-block-for-embed]]\n    [athens.views.blocks :as blocks]\n    [re-frame.core :refer [dispatch subscribe]]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n(defn todo-on-click\n  [uid from-str to-str]\n  (let [current-block-content (:block/string (db/get-block [:block/uid uid]))]\n    (dispatch [:transact [{:block/uid    uid\n                           :block/string (clojure.string/replace\n                                           current-block-content\n                                           from-str\n                                           to-str)\n                           :edit/time    (now-ts)}]])))\n\n\n(defn span-click-stop\n  []\n  [:span {:on-click (fn [e]\n                      (.. e stopPropagation))}])\n\n\n(defmethod component :todo\n  [_content uid]\n  [span-click-stop\n   [:input {:type      \"checkbox\"\n            :checked   false\n            :on-change #(todo-on-click uid #\"\\{\\{\\[\\[TODO\\]\\]\\}\\}\" \"{{[[DONE]]}}\")}]])\n\n\n(defmethod component :done\n  [_content uid]\n  [span-click-stop\n   [:input {:type      \"checkbox\"\n            :checked   true\n            :on-change #(todo-on-click uid #\"\\{\\{\\[\\[DONE\\]\\]\\}\\}\" \"{{[[TODO]]}}\")}]])\n\n\n(defmethod component :youtube\n  [content _uid]\n  [span-click-stop\n   [:div.media-16-9\n    [:iframe {:src   (str \"https://www.youtube.com/embed/\" (get (re-find #\".*v=([a-zA-Z0-9_\\-]+)\" content) 1))\n              :allow \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"}]]])\n\n\n(defmethod component :iframe\n  [content _uid]\n  [span-click-stop\n   [:div.media-16-9\n    [:iframe {:src (re-find #\"http.*\" content)}]]])\n\n\n(defmethod component :self\n  [content _uid]\n  [span-click-stop\n   [:button {:style {:color       \"red\"\n                     :font-family \"IBM Plex Mono\"}}\n    content]])\n\n\n(def block-embed-adjustments\n  {:background (color :background-minus-2 :opacity-med)\n   :position   \"relative\"\n   ::stylefy/manual [[:>.block-container {:margin-left \"0\"\n                                          ::stylefy/manual [[:.textarea {:background \"transparent\"}]]}]\n                     [:>svg              {:position   \"absolute\"\n                                          :right      \"5px\"\n                                          :top        \"5px\"\n                                          :font-size  \"1rem\"\n                                          :z-index    \"5\"\n                                          :cursor     \"pointer\"}]]})\n\n\n\n(defmethod component :block-embed\n  [content uid]\n  [:div.block-embed (use-style block-embed-adjustments)\n   (let [block (->> (re-find #\"\\(\\((.+)\\)\\)\" content)\n                    last (vector :block/uid) db/get-block-document)]\n     [:<>\n      [blocks/block-el\n       (recursively-modify-block-for-embed block (random-uuid))\n       {:linked-ref false}\n       {:block-embed? true}]\n      (when-not @(subscribe [:editing/is-editing uid])\n        [:> mui-icons/Edit\n         {:on-click (fn [e]\n                      (.. e stopPropagation)\n                      (dispatch [:editing/uid uid]))}])])])\n\n\n\n"]}