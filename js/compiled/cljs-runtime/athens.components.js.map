{"version":3,"sources":["athens/components.cljs"],"mappings":";AAaA,AAAA,AAAMA,AACHC,AAAIC,AAASC;AADhB,AAEE,AAAMC,AAAsB,AAAA,AAAe,AAAA,AAAA,AAACC,AAAyBJ;AAArE,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACK,AAAoCL,AACA,AAACM,AACCH,AACAF,AACAC,AACF,AAACK;;AAG1C,AAAAC,AAAA,AAAA,AACGC,AAAST;AADZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAIuB,AAAA,AAAA,AAACD,AAAcC;;;AAGtC,AAAAQ,AAAA,AAAA,AACGC,AAAST;AADZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAIuB,AAAA,AAAA,AAACD,AAAcC;;;AAGtC,AAAAQ,AAAA,AAAA,AACGE,AAAQC;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGoB,AAAA,AAAsC,AAAA,AAACC,AAAI,AAAA,AAACC,AAAiCH;;AAIjG,AAAAF,AAAA,AAAA,AACGE,AAAQC;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGkB,AAAA,AAACE,AAAkBH;;AAGrC,AAAAF,AAAA,AAAA,AACGE,AAAQC;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIGD;;AAGH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKI,AACU,AAAA,AAACC;AAKhB,AAAAP,AAAA,AAAA,AACGE,AAAQC;AADX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEoB,AAACK,AAAUF,AAC3BG,AACA,AAAA,AAAA,AAACC,AACc,AAACC,AAAK,AAAA,AAACN,AAAwBH","names":["athens.components/todo-on-click","uid","from-str","to-str","current-block-content","athens.db/get-block","re-frame.core/dispatch","clojure.string/replace","athens.util/now-ts","athens.parse-renderer/componentx","_content","content","_uid","cljs.core.get","cljs.core/re-find","athens.components/block-embed-adjustments","athens.style.color","stylefy.core.use_style","athens.views.blocks/block-el","athens.db/get-block-document","cljs.core/last"],"sourcesContent":["(ns athens.components\n  (:require\n    [athens.parse-renderer :refer [componentx]]\n    [athens.views.blocks :as blocks]\n    [athens.style :refer [color OPACITIES]]\n    [athens.db :as db]\n    [athens.util :refer [now-ts]]\n    [re-frame.core :refer [dispatch]]\n    [posh.reagent :refer [posh! pull q]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n(defn todo-on-click\n  [uid from-str to-str]\n  (let [current-block-content (:block/string (db/get-block [:block/uid uid]))]\n    (dispatch [:transact [{:block/uid    uid\n                           :block/string (clojure.string/replace\n                                           current-block-content\n                                           from-str\n                                           to-str)\n                           :edit/time    (now-ts)}]])))\n\n\n(defmethod componentx :todo\n  [_content uid]\n  [:input {:type      \"checkbox\"\n           :checked   false\n           :on-change #(todo-on-click uid #\"\\{\\{\\[\\[TODO\\]\\]\\}\\}\" \"{{[[DONE]]}}\")}])\n\n\n(defmethod componentx :done\n  [_content uid]\n  [:input {:type      \"checkbox\"\n           :checked   true\n           :on-change #(todo-on-click uid #\"\\{\\{\\[\\[DONE\\]\\]\\}\\}\" \"{{[[TODO]]}}\")}])\n\n\n(defmethod componentx :youtube\n  [content _uid]\n  [:div.media-16-9\n   [:iframe {:src   (str \"https://www.youtube.com/embed/\" (get (re-find #\".*v=([a-zA-Z0-9_\\-]+)\" content) 1))\n             :allow \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"}]])\n\n\n(defmethod componentx :iframe\n  [content _uid]\n  [:div.media-16-9\n   [:iframe {:src (re-find #\"http.*\" content)}]])\n\n\n(defmethod componentx :self\n  [content _uid]\n  [:button {:style {:color       \"red\"\n                    :font-family \"IBM Plex Mono\"}}\n   content])\n\n\n(def block-embed-adjustments\n  {:background (color :background-minus-2)\n   ::stylefy/manual [[:>.block-container\n                      {:margin-left \"0\"\n                       ::stylefy/manual [[:.textarea {:background \"transparent\"}]]}]]})\n\n(defmethod componentx :block-embed\n  [content _uid]\n  [:div.block-embed (use-style block-embed-adjustments)\n   [blocks/block-el\n    (db/get-block-document\n      [:block/uid  (last (re-find #\"\\(\\((.+)\\)\\)\" content))])\n    {:linked-ref false}\n    {:block-content-click? true}]])\n\n\n\n"]}